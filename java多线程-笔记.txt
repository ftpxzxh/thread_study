
1、创建线程的两种方式：
	看类TraditionalThread
获取当前线程的名字：Thread.currentThread().getName()

2、定时器的应用
	看类TraditionalTimerTest

3、线程的同步synchronized
	看类TraditionalThreadSynchronized

4、一道面试题目（线程间的通信问题，wait()和notify()，必须写在synchronized的里面，并且调用wait()和notify()的对象为锁对象）
	子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出代码
	
	1）先实现子线程运行10次，主线程运行100次，如此循环50次；
	2）使用wait()和notify()实现线程间的通信，使得主线程和子线程交替运行
	
	看类TraditionalThreadCommunication
	
5、线程内的共享数据（ThreadLocal）
	问题引入：看类ThreadScopeShareDataHasMistake
	ThreadLocal的原理：看类ThreadScopeShareData
	ThreadLocal的使用和设计：ThreadLocalTest

6、面试题目（多个线程访问共享数据）
	面试宝典28、设计4个线程，其中两个线程每次对j加1，另外两个线程每次对j减1，写出程序
	看类MultiThreadShareData

以上是java5之前的多线程知识

java5以后的线程新知识
1、java5原子性操作类的应用-atomic
	AtomicInteger、AtomicIntegerArray、AtomicIntegerFieldUpdater

2、线程池Executors
	看类ThreadPoolTest
	
3、Callable与Future的应用
	看类CallableAndFuture
	
4、Lock(用来替换synchronized)
	1）看类LockTest，介绍了ReentrantLock的使用
	2）看类ReadWriteLockTest，介绍了ReadWriteLock接口和其子类ReentrantReadWriteLock的使用
	面试题目：设计一个缓存系统 看类CacheDemo
	示例用法。下面的代码展示了如何利用重入来执行升级缓存后的锁降级（为简单起见，省略了异常处理）： 

JDK中的ReentrantReadWriteLock文档中有这么一段示例代码
 class CachedData {
   Object data;
   volatile boolean cacheValid;
   ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();

   void processCachedData() {
     rwl.readLock().lock();
     if (!cacheValid) {
        // Must release read lock before acquiring write lock
        rwl.readLock().unlock();
        rwl.writeLock().lock();
        // Recheck state because another thread might have acquired
        //   write lock and changed state before we did.
        if (!cacheValid) {
          data = ...
          cacheValid = true;
        }
        // Downgrade by acquiring read lock before releasing write lock
        rwl.readLock().lock();
        rwl.writeLock().unlock(); // Unlock write, still hold read
     }

     use(data);
     rwl.readLock().unlock();
   }
 }
 第一次读的时候，上读锁，使得写的线程不能进来；
但是第一次读的时候发现cacheValid是false，即还没有缓存，所以就先把读锁释放，然后上写锁；
如果读锁切换成写锁的过程中，缓存cacheValid还是false，表示没有其他线程缓存过，这时候就在加写锁的情况下进行数据的缓存，缓存完成后，就把缓存标志位变为true，最后上读锁，并把写锁释放；
然后就可以使用缓存数据了，使用完成后，就把读锁释放掉

6、Condition实现线程同步通信（用来替换之前学的await()和notify()）
	看类ConditionCommunication
	Condition condition = lock.newCondition();
	condition.await();
	condition.signal();
	用condition可以实现多路等待和通知
作为一个示例，假定有一个绑定的缓冲区，它支持 put 和 take 方法。如果试图在空的缓冲区上执行 take 操作，则在某一个项变得可用之前，线程将一直阻塞；
如果试图在满的缓冲区上执行 put 操作，则在有空间变得可用之前，线程将一直阻塞。
我们喜欢在单独的等待 set 中保存 put 线程和 take 线程，这样就可以在缓冲区中的项或空间变得可用时利用最佳规划，一次只通知一个线程。
可以使用两个 Condition 实例来做到这一点。
 class BoundedBuffer {
   final Lock lock = new ReentrantLock();
   final Condition notFull  = lock.newCondition(); 
   final Condition notEmpty = lock.newCondition(); 

   final Object[] items = new Object[100];
   int putptr, takeptr, count;

   public void put(Object x) throws InterruptedException {
     lock.lock();
     try {
       while (count == items.length) //如果已经满了，那么没有放满的线程就要等待
         notFull.await();
       items[putptr] = x; 
       if (++putptr == items.length) putptr = 0;
       ++count;
       notEmpty.signal();			//缓冲区有一个已经放入了，就通知不是空的取的线程去取
     } finally {
       lock.unlock();
     }
   }

   public Object take() throws InterruptedException {
     lock.lock();
     try {
       while (count == 0) 
         notEmpty.await();
       Object x = items[takeptr]; 
       if (++takeptr == items.length) takeptr = 0;
       --count;
       notFull.signal();
       return x;
     } finally {
       lock.unlock();
     }
   } 
 }
 
 灵活运用Condition
 	看类ThreeConditionCommunication
	1走完通知2走，2走完通知3走，3走完通知1走；如此循环

7、Semaphore实现信号灯 可用于控制同时访问资源的线程个数
	看类SemaphoreTest

8、CyclicBarrier   彼此等待，集合后再共同出发
 	看类CyclicBarrierTest
	
9、CountdownLatch 类似于百米赛跑
	看类CountdownLatchTest
	
10.Exchanger 线程间的数据交换
	看类ExchangerTest
	
11. 阻塞队列（ArrayBlockingQueue）
	看类BlockingQueueTest
	
	用两个具有一个空间的队列可以实现同步通知的功能（ArrayBlockingQueue）
	看类BlockingQueueCommunication
	
12.同步集合
	看类CollectionModifyExceptionTest
	CopyOnWriteArrayList解决在迭代的时候不能对集合进行删除的问题
	
13.空中网面试题目（分别对应Test1/Test2/Test3）
第一题：现有的程序代码模拟产生了16个日志对象，并且需要运行16秒才能打印完这些日志，请在程序中增加4个线程去调用parseLog()方法来分头打印这16个日志对象，程序只需要运行4秒即可打印完这些日志对象。
原始代码如下：
	package read;
	
	public class Test {
		
		public static void main(String[] args){
	        
			System.out.println("begin:"+(System.currentTimeMillis()/1000));
			/*模拟处理16行日志，下面的代码产生了16个日志对象，当前代码需要运行16秒才能打印完这些日志。
			修改程序代码，开四个线程让这16个对象在4秒钟打完。
			*/
			for(int i=0;i<16;i++){  //这行代码不能改动
				final String log = ""+(i+1);//这行代码不能改动
				{
		     			Test.parseLog(log);
				}
			}
		}
		
		//parseLog方法内部的代码不能改动
		public static void parseLog(String log){
			System.out.println(log+":"+(System.currentTimeMillis()/1000));
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}		
		}
		
	}

      第二题：现成程序中的Test类中的代码在不断地产生数据，然后交给TestDo.doSome()方法去处理，就好像生产者在不断地产生数据，消费者在不断消费数据。
      请将程序改造成有10个线程来消费生成者产生的数据，这些消费者都调用TestDo.doSome()方法去进行处理，故每个消费者都需要一秒才能处理完，
      程序应保证这些消费者线程依次有序地消费数据，只有上一个消费者消费完后，下一个消费者才能消费数据，下一个消费者是谁都可以，但要保证这些消费者线程拿到的数据是有顺序的。
      原始代码如下：

	package queue;
	
	public class Test {
	
		public static void main(String[] args) {
			
			System.out.println("begin:"+(System.currentTimeMillis()/1000));
			for(int i=0;i<10;i++){  //这行不能改动
				String input = i+"";  //这行不能改动
				String output = TestDo.doSome(input);
				System.out.println(Thread.currentThread().getName()+ ":" + output);
			}
		}
	}
	
	//不能改动此TestDo类
	class TestDo {
		public static String doSome(String input){
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String output = input + ":"+ (System.currentTimeMillis() / 1000);
			return output;
		}
	}

      第三题：现有程序同时启动了4个线程去调用TestDo.doSome(key, value)方法，由于TestDo.doSome(key, value)方法内的代码是先暂停1秒，然后再输出以秒为单位的当前时间值，所以，会打印出4个相同的时间值，如下所示：
		4:4:1258199615
		1:1:1258199615
		3:3:1258199615
		1:2:1258199615
        请修改代码，如果有几个线程调用TestDo.doSome(key, value)方法时，传递进去的key相等（equals比较为true），则这几个线程应互斥排队输出结果，即当有两个线程的key都是"1"时，它们中的一个要比另外其他线程晚1秒输出结果，如下所示：
		4:4:1258199615
		1:1:1258199615
		3:3:1258199615
		1:2:1258199616
	  总之，当每个线程中指定的key相等时，这些相等key的线程应每隔一秒依次输出时间值（要用互斥），如果key不同，则并行执行（相互之间不互斥）。原始代码如下：

	package syn;

	//不能改动此Test类	
	public class Test extends Thread{
		
		private TestDo testDo;
		private String key;
		private String value;
		
		public Test(String key,String key2,String value){
			this.testDo = TestDo.getInstance();
			/*常量"1"和"1"是同一个对象，下面这行代码就是要用"1"+""的方式产生新的对象，
			以实现内容没有改变，仍然相等（都还为"1"），但对象却不再是同一个的效果*/
			this.key = key+key2; 
			this.value = value;
		}


		public static void main(String[] args) throws InterruptedException{
			Test a = new Test("1","","1");
			Test b = new Test("1","","2");
			Test c = new Test("3","","3");
			Test d = new Test("4","","4");
			System.out.println("begin:"+(System.currentTimeMillis()/1000));
			a.start();
			b.start();
			c.start();
			d.start();

		}
	